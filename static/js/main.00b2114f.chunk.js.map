{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","props","total","perPage","currPage","onPageChange","lastPage","Math","ceil","amountOfPages","className","classNames","disabled","href","onClick","map","page","active","App","useState","setPerPage","setCurrPage","firstItemOnPage","lastItemOnPage","min","itemsPerPage","id","value","onChange","event","Number","target","handleChangePerPage","htmlFor","curr","item","ReactDOM","render","document","getElementById"],"mappings":"mLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,CACR,C,2BCGYG,EAA8B,SAACC,GAC1C,IACEC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,QACAC,EAEEH,EAFFG,SACAC,EACEJ,EADFI,aAGIC,EAAWC,KAAKC,KAAKN,EAAQC,GAC7BM,EAAgBf,EAAW,EAAGY,GAEpC,OACE,mCACE,qBAAII,UAAU,aAAd,UACE,oBACEA,UAAWC,IACT,YACA,CAAEC,SAAuB,IAAbR,IAHhB,SAME,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAA4B,IAAbT,EACfU,QAAS,WACU,IAAbV,GACFC,EAAa,OAEhB,EATH,oBAeDI,EAAcM,KAAI,SAAAC,GAAI,OACrB,oBAEEN,UAAWC,IACT,YACA,CAAEM,OAAQD,IAASZ,IAJvB,SAOE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMT,EAAaW,EAAnB,EAJX,SAMGA,KAZEA,EAFc,IAmBvB,oBACEN,UAAWC,IACT,YACA,CAAEC,SAAUR,IAAaE,IAH7B,SAME,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeT,IAAaE,EAC5BQ,QAAS,WACHV,IAAaE,GACfD,EAAa,OAEhB,EATH,wBAiBT,ECnFYa,G,MAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOhB,EAAP,KAAgBiB,EAAhB,KACA,EAAgCD,mBAAS,GAAzC,mBAAOf,EAAP,KAAiBiB,EAAjB,KAEMC,EAAkBnB,GAAWC,EAAW,GAAK,EAC7CmB,EAAiBhB,KAAKiB,IAAIrB,EAAUC,EAF5B,IAGRqB,EAAe/B,EAAW4B,EAAiBC,GAqBjD,OACE,sBAAKb,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWN,EADX,mBAC8BkB,EAD9B,cACmDC,EADnD,aAIA,sBAAKb,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRgB,GAAG,kBACHhB,UAAU,eACViB,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAlCQ,SAACA,GAC3BT,EAAWU,OAAOD,EAAME,OAAOJ,QAC/BN,EAAY,EACb,CA+B8BW,CAAoBH,EAA/B,EALZ,UAOE,wBAAQF,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,qBAIJ,uBAAOM,QAAQ,kBAAkBvB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACER,MAtDQ,GAuDRC,QAASA,EACTC,SAAUA,EACVC,aA/CmB,SAACW,GACJ,kBAATA,GACTK,EAAYL,GAGD,SAATA,GACFK,GAAY,SAAAa,GAAI,OAAIA,EAAO,CAAX,IAGL,SAATlB,GACFK,GAAY,SAAAa,GAAI,OAAIA,EAAO,CAAX,GAEnB,IAsCG,6BACGT,EAAaV,KAAI,SAAAoB,GAAI,OACpB,oBACE,UAAQ,OADV,wBAIWA,IAFJA,EAHa,QAW7B,GC7EDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.00b2114f.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currPage: number,\n  onPageChange: (page: number | string) => void,\n};\n\nexport const Pagination: React.FC<Props> = (props) => {\n  const {\n    total,\n    perPage,\n    currPage,\n    onPageChange,\n  } = props;\n\n  const lastPage = Math.ceil(total / perPage);\n  const amountOfPages = getNumbers(1, lastPage);\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={classNames(\n            'page-item',\n            { disabled: currPage === 1 },\n          )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currPage === 1}\n            onClick={() => {\n              if (currPage !== 1) {\n                onPageChange('prev');\n              }\n            }}\n          >\n            «\n          </a>\n        </li>\n\n        {amountOfPages.map(page => (\n          <li\n            key={page}\n            className={classNames(\n              'page-item',\n              { active: page === currPage },\n            )}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n\n        <li\n          className={classNames(\n            'page-item',\n            { disabled: currPage === lastPage },\n          )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currPage === lastPage}\n            onClick={() => {\n              if (currPage !== lastPage) {\n                onPageChange('next');\n              }\n            }}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\nimport './App.css';\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currPage, setCurrPage] = useState(1);\n  const total = 42;\n  const firstItemOnPage = perPage * (currPage - 1) + 1;\n  const lastItemOnPage = Math.min(perPage * currPage, total);\n  const itemsPerPage = getNumbers(firstItemOnPage, lastItemOnPage);\n\n  const handleChangePerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(Number(event.target.value));\n    setCurrPage(1);\n  };\n\n  const handleChangePage = (page: number | string) => {\n    if (typeof page === 'number') {\n      setCurrPage(page);\n    }\n\n    if (page === 'next') {\n      setCurrPage(curr => curr + 1);\n    }\n\n    if (page === 'prev') {\n      setCurrPage(curr => curr - 1);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currPage} (items ${firstItemOnPage} - ${lastItemOnPage} of 42)`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => handleChangePerPage(event)}\n          >\n            <option value={3}>3</option>\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={20}>20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currPage={currPage}\n        onPageChange={handleChangePage}\n\n      />\n      <ul>\n        {itemsPerPage.map(item => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {`Item ${item}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}